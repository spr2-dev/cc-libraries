-- Require cc.expect library
local expect = require("cc.expect").expect

-- Table that will hold all library functions and will be returned.
local capture = {}

--[[
  Captures the current term's screen contents, and returns them
  as a table that can passed back to `capture.redraw`.
  
  startY : Line to start capturing at (incl.).
  endY : Line to stop capturing at (incl.).

  If a param is omitted, the default value for it is used.
]]
capture.capture = function(startY, endY)
  expect(1, startY, "number", "nil")
  expect(2, endY, "number", "nil")

  local currentTerm = term.current()
  local width, height = currentTerm.getSize()
  
  -- Apply default values if needed
  startY = startY or 1
  endY = endY or height
  
  if startY > endY then
    startY, endY = endY, startY
  end

  local output = {}
  for y=startY, endY do
    output[y] = {currentTerm.getLine(y)}
  end

  return output
end

--[[
  Draws all the lines contained in `lines` onto the screen.
  The indexes are preserved, ie. each line is drawn at
  the position it was taken.

  lines : Table generated by `capture.capture`.
]]
capture.redraw = function(lines)
  expect(1, lines, "table")

  for y, data in pairs(lines) do
    term.setCursorPos(1, y)
    term.blit(unpack(data))
  end
end

--[[
  Draws a single line onto the screen. The line is drawn at the
  line number defined by the `y` param.

  line : A single item of the table generated by `capture.capture`.
  y : Line's draw Y position.
]]
capture.redrawLine = function(line, y)
  expect(1, line, "table")
  expect(2, y, "number")

  term.setCursorPos(1, y)
  term.blit(unpack(line))
end


return capture